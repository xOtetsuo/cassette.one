{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/options.ts"],"names":[],"mappings":"","sourcesContent":["import { LogLevel } from './logger';\nimport { Transport } from './transport';\nimport { Retry } from './retry';\nimport { Response } from './response';\nimport { Plan } from './plan';\n\n/**\n * Options that you can choose to configure against the client.\n */\nexport interface Options {\n  /**\n   * Whether or not the SDK should be started in debug mode.\n   * This will enable the SDK to generate logs at WARN level or above, if the\n   * logLevel is not specified.\n   */\n  debug: boolean;\n\n  /**\n   * Configuration of the logging verbosity of the SDK.\n   * 0 = NONE: No Logs will be surfaced.\n   * 1 = ERROR: SDK internal errors will be generated.\n   * 2 = WARN: Warnings will be generated around dangerous/deprecated features.\n   * 3 = VERBOSE: All SDK actions will be logged.\n   */\n  logLevel: LogLevel;\n\n  /** The maximum events in the buffer */\n  maxCachedEvents: number;\n\n  /**\n   * The maximum number of times a server will attempt to retry\n   * @deprecated Please use retryTimeouts. It will be converted to retryTimeouts with exponential wait times (e.g. 100ms -> 200ms -> 400ms -> ...)'\n   */\n  maxRetries?: number;\n\n  /**\n   * Determines # of retries for sending failed events and how long each retry to wait for (ms)\n   * An empty array means no retries\n   */\n  retryTimeouts: number[];\n\n  /**\n   * Whether you opt out from sending events.\n   */\n  optOut: boolean;\n\n  /**\n   * The class being used to handle event retrying.\n   */\n  retryClass: Retry | null;\n\n  /**\n   * The class being used to transport events.\n   */\n  transportClass: Transport | null;\n\n  /** If you're using a proxy server, set its url here. */\n  serverUrl: string;\n\n  /** The events upload interval */\n  uploadIntervalInSec: number;\n\n  /**\n   * Optional parameter allowing users to set minimum permitted length for user_id & device_id fields\n   * As described here: https://developers.amplitude.com/docs/http-api-v2#schemaRequestOptions\n   */\n  minIdLength?: number | null;\n\n  /**\n   * Configurable timeout\n   */\n  requestTimeoutMillis: number;\n\n  /**\n   * Lifecycle callback that is executed after a retry attempt. Called in {@link Retry.sendEventsWithRetry}\n   *\n   * @param response Response from the given retry attempt\n   * @param attemptNumber Index in retryTimeouts for how long Amplitude waited before this retry attempt. Starts at 0.\n   * @param isLastRetry True if attemptNumber === retryTimeouts.length - 1\n   */\n  onRetry: ((response: Response, attemptNumber: number, isLastRetry: boolean) => boolean) | null;\n\n  /**\n   * Global tracking plan information\n   */\n  plan?: Plan;\n}\n"]}